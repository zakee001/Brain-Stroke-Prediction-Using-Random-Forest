# -*- coding: utf-8 -*-
"""Brain stroke Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12FeOpl8pI-vj7wG_-R6dVnjLP8YKt_r6
"""

#importing libraries 
import numpy as np
import pandas as pd 
import tensorflow as tf
import matplotlib.pyplot as plt

#reading the file 
df = pd.read_csv("full_data.csv")

#importing label encoder.
#used for transforming the  
from sklearn.preprocessing import LabelEncoder
labels = LabelEncoder()

df.head()

#code to convert the non numeric data into the numeric data
#converting all the columns into the numeric values.

df['work_type']=labels.fit_transform(df['work_type'])
df['smoking_status']=labels.fit_transform(df['smoking_status'])
df['ever_married']=labels.fit_transform(df['ever_married'])
df['Residence_type']=labels.fit_transform(df['Residence_type'])

#after all converting the gender into the 0 and 1.
df['gender']=labels.fit_transform(df['gender'])

#checking if the data is normailized or not.
df.head()

#splitting the columns into x and y for the test and train 
x = df.iloc[:,0:10].values
y = df.iloc[:,10].values

#testing if the data is splitted correctly or not
y

#dividing the data into test train split by giving the ratios
#we use 30% test, train split.
from sklearn.model_selection import train_test_split 
x_train,x_test,y_train,y_test = train_test_split(x,y, test_size=0.3 ,random_state = 0 )

#fitting the data test and train of the data 
from sklearn.preprocessing import StandardScaler
s = StandardScaler()
x_train = s.fit_transform(x_train)
x_test = s.fit_transform(x_test)

##importing the random forest classifer and pass the data to the random forest
from sklearn.ensemble import RandomForestClassifier
classifier = RandomForestClassifier(n_estimators=100,random_state = 0 )
classifier.fit(x_train,y_train)

#get the predictions of the dataset 
y_pred =classifier.predict(x_test)

y_pred

#testing the accuracy of the model
from sklearn.metrics import classification_report,confusion_matrix,accuracy_score
print(accuracy_score(y_test,y_pred))

#printing the results infront of Each other
# creating 2 DataFrames
ent1 = pd.DataFrame(y_test)
ent2 = pd.DataFrame(y_pred)
  
# concatenating the DataFrames
det = pd.concat([ent1,ent2], join = 'outer', axis = 1)
  
# displaying the DataFrame
print(det)

